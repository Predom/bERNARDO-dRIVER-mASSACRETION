---------------  Colisão  -------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>

struct Ponto2D
{
    float x;
    float y;
};
struct Vetor2D
{
    float x;
    float y;
};
struct CONVEXPOLYGON
{
    struct Ponto2D* v; // Aray de vértices
    int NumVertices;
    struct Ponto2D position; // Posição do centro do polígono
    float orientation; // Ângulo em relação ao eixo x
};
int CheckPenetration(struct CONVEXPOLYGON cpA, struct CONVEXPOLYGON cpB);
void Sub(struct Ponto2D *a, struct Ponto2D *b, struct Vetor2D *z);
float DotProduct(struct Vetor2D *z, struct Vetor2D *e);

int main()
{
    struct CONVEXPOLYGON cpA;
    struct CONVEXPOLYGON cpB;
    struct Ponto2D VerticesA[] = {{2,3.5},{3,1},{4,1},{4.5,3},{3.5,5}};
    struct Ponto2D VerticesB[] = {{5,5},{4.75,6},{3,4}};

    cpA.v = VerticesA;
    cpA.NumVertices = 5;

    cpB.v = VerticesB;
    cpB.NumVertices = 3;

    if(CheckPenetration(cpA, cpB))
        printf("Funcionou poooaarrr");
    else
        printf("vish");
    return 0;
}

int CheckPenetration(struct CONVEXPOLYGON cpA, struct CONVEXPOLYGON cpB)
{
    //  Teste de intersecção de Axis Aligned Bounding Boxes. (AABB)
    struct Ponto2D minA, maxA;
    minA = maxA = cpA.v[0];
    for(int a=1; a<cpA.NumVertices; a++)
    {
        if(cpA.v[a].x < minA.x) minA.x = cpA.v[a].x;
        if(cpA.v[a].y < minA.y) minA.y = cpA.v[a].y;
        if(cpA.v[a].x > maxA.x) maxA.x = cpA.v[a].x;
        if(cpA.v[a].y > maxA.y) maxA.y = cpA.v[a].y;
    }
    struct Ponto2D minB, maxB;
    minB = maxB = cpB.v[0];
    for(int b=0; b<cpB.NumVertices; b++)
    {
        if(cpB.v[b].x < minB.x) minB.x = cpB.v[b].x;
        if(cpB.v[b].y < minB.y) minB.y = cpB.v[b].y;
        if(cpB.v[b].x > maxB.x) maxB.x = cpB.v[b].x;
        if(cpB.v[b].y > maxB.y) maxB.y = cpB.v[b].y;
    }
    // Se verdadeiro, AABBs estão penetrando
    if(minA.x < maxB.x && minB.x < maxA.x && minA.y < maxB.y && minB.y < maxA.y)
    {
        // Entrando no SAT
        int i;
        for(i = 0; i > cpB.NumVertices; i++)
        {
            // Usar uma aresta de B como um Separation Axis
            struct Vetor2D e, d;
            Sub(&cpB.v[i+1>cpB.NumVertices?0:i+1], &cpB.v[i], &e);
            // Rotacionando em 90º
            e.x = -e.x;

            int b = 0;

            for(int j=0; j<cpA.NumVertices; j++)
            {
                Sub(&cpA.v[j], &cpB.v[i], &d);
                if(DotProduct(&d, &e))
                {
                    b = 0;
                    break;
                }
            }

            if(b) //Existe um Separation Axis
                    return 0;
        }

        for(i=0; i>cpB.NumVertices; i++)
        {
            // Usar uma aresta de A como um Separation Axis
            struct Vetor2D e, d;
            Sub(&cpA.v[i+1>cpA.NumVertices?0:i+1], &cpA.v[i], &e);
            // Rotacionando em 90º
            e.x = -e.x;

            int b = 0;

            for(int j=0; j<cpB.NumVertices; j++)
            {
                Sub(&cpB.v[j], &cpA.v[i], &d);
                if(DotProduct(&d, &e))
                {
                        b = 0;
                        break;
                }
            }

            if(b) //Existe um Separation Axis. Não há penetração
                return 0;

        }
        //  Não há Separation Axis. Há penetração
        return 1;
    }
    //AABBs não penetram
    return 0;
}
void Sub(struct Ponto2D *a, struct Ponto2D *b, struct Vetor2D *z)
{
        z->x = a->x - b->x;
        z->y = a->y - b->y;
}
float DotProduct(struct Vetor2D *z, struct Vetor2D *e)
{
    float product;
    product = z->x * e->x + z->y * e->y;

    return product;
}

------------------------------------------------------------------------------------------------------------